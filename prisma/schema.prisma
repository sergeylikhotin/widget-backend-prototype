model Widget {
  id String @id @default(uuid())

  name String

  schema Schema?
  // dataSources DataSource[]
}

// enum DataSourceType {
//   Tournament
//   Realtime
//   Info
// }
//
// model DataSource {
//   id String @id @default(uuid())
//
//   name String
//   type DataSourceType
//
//   widget   Widget? @relation(fields: [widgetId], references: [id])
//   widgetId String?
//
//   tournament TournamentDataSource?
// }
//
// model TournamentDataSource {
//   id         String     @id
//   dataSource DataSource @relation(fields: [id], references: [id])
//
//   tournamentId String
//
//   maincast MaincastTournamentDataSource?
//   dota2    Dota2APITournamentDataSource?
// }
//
// model MaincastTournamentDataSource {
//   id                   String               @id
//   tournamentDataSource TournamentDataSource @relation(fields: [id], references: [id])
//
//   tournamentId String
// }
//
// model Dota2APITournamentDataSource {
//   id                   String               @id
//   tournamentDataSource TournamentDataSource @relation(fields: [id], references: [id])
//
//   tournamentId String
// }

model Schema {
  id   String @id @default(uuid())
  name String

  components Component[]

  widget   Widget @relation(fields: [widgetId], references: [id])
  widgetId String @unique
}

enum ComponentType {
  Root
  Base

  DataSource

  Text
  Image
}

model ComponentSchema {
  id   String @id @default(uuid())
  name String

  type ComponentType

  components Component[]
}

model Component {
  id String @id @default(uuid())

  schemaId String
  schema   Schema @relation(fields: [schemaId], references: [id])

  parentId String?
  parent   Component? @relation("ComponentInheritance", fields: [parentId], references: [id])

  componentSchemaId String
  componentSchema   ComponentSchema @relation(fields: [componentSchemaId], references: [id])

  text  TextComponent?
  image ImageComponent?

  dataBinded DataBindedComponent?
  dataSource DataSourceComponent?

  eventsContainer EventsContainer?

  children Component[] @relation("ComponentInheritance")
}

model TextComponent {
  id        String    @id
  component Component @relation(fields: [id], references: [id])

  value String
}

model ImageComponent {
  id        String    @id
  component Component @relation(fields: [id], references: [id])

  url String
}

model DataBindedComponent {
  id        String    @id
  component Component @relation(fields: [id], references: [id])

  // JSON field
  bindings Json
}

model DataSourceComponent {
  id        String    @id
  component Component @relation(fields: [id], references: [id])

  // Data field path
  source String
}

model EventsContainer {
  id        String    @id
  component Component @relation(fields: [id], references: [id])

  events Event[]
}

model Event {
  id String @id @default(uuid())

  type    String
  actions Action[]

  eventsComponentId String?
  eventsComponent   EventsContainer? @relation(fields: [eventsComponentId], references: [id])
}

model Action {
  id String @id @default(uuid())

  name   String
  params ActionParam[]

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id])
}

model ActionParam {
  id String @id @default(uuid())

  name  String
  type  ActionParamType
  value String

  actionId String?
  action   Action? @relation(fields: [actionId], references: [id])
}

enum ActionParamType {
  String
  Number
  Boolean
  Date

  JSON
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
